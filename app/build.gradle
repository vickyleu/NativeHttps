apply plugin: 'com.android.application'
apply plugin: 'bugly'

bugly {
    appId = '2bdb10debd' // 注册时分配的App ID
    appKey = '7233db83-2486-49f2-ab49-65987a3899ae' // 注册时分配的App Key
    debug = true
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.vicky.libcurl"
        minSdkVersion 10
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                //command  adb shell setprop dalvik.vm.checkjni true
                abiFilters 'armeabi', 'armeabi-v7a', 'mips', 'x86', 'x86_64', 'arm64-v8a'//,'mips64'
                // Sets a flag to enable format macro constants for the C++ compiler.
                cppFlags '-frtti',
                        '-Wwritable-strings',
                        '-Wno-return-type-c-linkage',
                        '-fexceptions',
                        '-DJSON_IS_AMALGAMATION',
                        '-fstack-protector-all',
                        '-O3',
                        '-fPIC'

                cFlags '-Wwritable-strings',
                        '-Wno-return-type-c-linkage',
                        '-DJSON_IS_AMALGAMATION',
                        '-fstack-protector-all',
                        '-O3',
                        '-fPIC'

//                def PATH_SO="C:/Develop/Android/SDK/ndk-bundle/platforms/android-9/${ANDROID_ABI}/usr/lib"
//                def z="${PATH_SO}/libz.so"
//                def m="${PATH_SO}/libm.so"
//                def c="${PATH_SO}/libm.so"
//                def android="${PATH_SO}/libandroid.so"
                /*'-std=c++11',*/
//                targets "native-lib-demo"
//                // Passes optional arguments to CMake.
                arguments '-DANDROID_STL = gnustl_shared',//gnustl_shared',
                        '-DCMAKE_VERBOSE_MAKEFILE = TRUE',
                        '-DANDROID_PLATFORM=android-14',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DLIBCXX_FORCE_REBUILD = true',
                        '-DAPP_OPTIM = debug' //, '-DANDROID_CPP_FEATURES=rtti exceptions',
                // '-DSTLPORT_FORCE_REBUILD = TRUE',
//                // Sets optional flags for the C compiler.
//                cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"
            }
        }
    }
    signingConfigs {
        //指定名叫release的一个签名对象 会在下面的脚本中，动态根据配置文件设置属性
        release {}
    }
    buildTypes {
        release {
            jniDebuggable true
            debuggable true
            minifyEnabled false
            if (signingConfigs.release != null) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
            debuggable true
            if (signingConfigs.release != null) {
                signingConfig signingConfigs.release
            }
            debuggable true
        }
    }


    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.+'
    compile 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    testCompile 'junit:junit:4.12'
    compile 'com.google.protobuf:protobuf-java:3.3.1'
}

/*读取签名信息*/
def Properties props = new Properties()
def propFile = file('./signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props != null
            && props.containsKey('RELEASE_STORE_DIR_PATH')
            && props.containsKey('RELEASE_STORE_FILE_PATH')
            && props.containsKey('RELEASE_STORE_PASSWORD')
            && props.containsKey('RELEASE_KEY_ALIAS')
            && props.containsKey('RELEASE_KEY_PASSWORD')) {
        try {
            try {
                file(props['RELEASE_STORE_DIR_PATH']).mkdirs()
            } catch (Exception ignored) {
                throw new Exception("签名文件夹创建失败")
            }
            if (!file(props['RELEASE_STORE_DIR_PATH'].
                    toString() + "/" + props['RELEASE_STORE_FILE_PATH']).exists()) {
                String dir = props['RELEASE_STORE_DIR_PATH'].toString()
                String signFile = props['RELEASE_STORE_FILE_PATH'].toString()
                signFile = signFile.replace(dir + "/", "")
                throw new Exception("app/sign目录下没有" + signFile + "签名文件")
            }
        } catch (Exception e) {
            throw new Exception(e.getMessage().toString())
        }

        android.signingConfigs.release.storeFile = file(props['RELEASE_STORE_DIR_PATH'].
                toString() + "/" + props['RELEASE_STORE_FILE_PATH'])
        android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
        android.signingConfigs.release.v2SigningEnabled = true
        println "use signing.properties file"
    } else {
        android.buildTypes.release.signingConfig = null
        println "not use signing.properties file"
    }
} else {
    android.buildTypes.release.signingConfig = null
    println "not find signing.properties file"
}
